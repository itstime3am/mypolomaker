String.prototype.trim=function(){return this.replace(/^\s\s*/, '').replace(/\s\s*$/, '');};

/*++ Array utils */
if(!Array.remove){
	Array.prototype.remove = function(from, to) {
		var rest = this.slice((to || from) + 1 || this.length);
		this.length = from < 0 ? this.length + from : from;
		return this.push.apply(this, rest);
	};
}
if(!Array.sum){
	Array.prototype.sum = function(selector) {
		if (typeof selector !== 'function') {
			selector = function(item) {
				return item;
			}
		}
		var sum = 0;
		for (var i = 0; i < this.length; i++) {
			sum += parseFloat(selector(this[i]));
		}
		return sum;
	};
}
if(!Array.indexOf){
	Array.prototype.indexOf = function(obj){
		for(var i=0; i<this.length; i++){
			if(this[i]==obj){
				return i;
			}
		}
		return -1;
	};
}
/*-- Array utils */

function formatNumber(nStr, digit, blnComma) {
	if (digit === undefined) digit = 2;
	if (blnComma === undefined) blnComma = true;
	fl = parseFloat(nStr);
	pow = Math.pow(10, digit);
	fl = Math.round(fl * pow) / pow;
	fx = fl.toFixed(digit);
	nStr = fx + '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? x[1] : '';
	if ((x2.length) < digit) {
		for (i=(digit - (x2.length));i<digit;i++) {
			x2 = x2 + '0';
		}
	}
	if (digit > 0) x2 = '.' + x2;

	if (blnComma) {
		var rgx = /(\d+)(\d{3})/;
		while (rgx.test(x1)) {
			x1 = x1.replace(rgx, '$1' + ',' + '$2');
		}
	}
	return x1 + x2;
}

function _findObjectInList(objList, objKey, objValue) {
	var _objList = objList || [];
	var _objKey = objKey || '';
	var _objVal = objValue || '';
	for (var _x in _objList) {
		if ((typeof _objList[_x] == null) || (typeof _objList[_x] == 'function') || (typeof _objList[_x] == 'undefined')) {
			continue;
		} else if ((typeof _objKey == 'object') && (_objVal == '')) {
			var _ea = _objList[_x];
			var _blnInvalid = false;
			for (var _y in _objKey) {
				if ((! _blnInvalid) && (! ((_y in _ea) && (_ea[_y] == _objKey[_y])))) _blnInvalid = true;
			}
			if (! _blnInvalid) return _ea;
		} else if (((_objKey.toLowerCase() == '__index') || (_objKey.toLowerCase() == '__key')) && (_isInt(_x))) {
			if ((_objList[_x] == _objVal)) return _objList[_x];
		} else if ((_objKey in _objList[_x]) && (_objList[_x][_objKey] == _objVal)) {
			return _objList[_x];
		}
	}
}

function _removeObjectFromList(objList, objKey, objValue) {
	var _objList = objList || [];
	var _objKey = objKey || '';
	var _objVal = objValue || '';
	for (var _x in _objList) {
		if ((typeof _objList[_x] == 'function')) {
			continue;
		} else if ((typeof _objKey == 'object')) {
			var _ea = _objList[_x];
			var _blnInvalid = false;
			for (var _y in _objKey) {
				if ((! _blnInvalid) && (! ((_y in _ea) && (_ea[_y] == _objKey[_y])))) _blnInvalid = true;
			}
			if (! _blnInvalid) {
				if (Array.isArray(objList)) { //array
					objList.splice(_x, 1);
				} else { //object
					delete objList[_x];
				}
			}
		} else if (((_objKey.toLowerCase() == '__index') || (_objKey.toLowerCase() == '__key')) && (_isInt(_x)) && (_objList[_x] == _objVal)) {
			if (Array.isArray(objList)) { //array
				objList.splice(_x, 1);
			} else { //object
				delete objList[_x];
			}
		} else if ((_objKey in _objList[_x]) && (_objList[_x][_objKey] == _objVal)) {
			if (Array.isArray(objList)) { //array
				objList.splice(_x, 1);
			} else { //object
				delete objList[_x];
			}
		}
	}
	return true;
}

/*
function datGetDate(str) {
	var parts = str.split("/");
	if (parts.length < 3) return false;
	return parseInt(parts[2], 10) + '-' + pad(parseInt(parts[1], 10), 2, '0') + '-' +  pad(parseInt(parts[0], 10), 2, '0');
}
*/
function datGetDate(str) {
	var parts = str.split("/");
	if (parts.length < 3) return false;
	return new Date(parseInt(parts[2], 10), (parseInt(parts[1], 10) - 1), parseInt(parts[0], 10));
}

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = "0" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc, dispFormat) {
		var dF = dateFormat;
		/* ++ buff added */
		var _dispFormat = dispFormat || '';
		if ((_dispFormat != '') && (_dispFormat in dateFormat.dispFormat)) {
			dF.i18n = dateFormat.dispFormat[_dispFormat];
		}
		/* -- buff added */

		// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date;
		if (isNaN(date)) throw SyntaxError("invalid date");

		mask = String(dF.masks[mask] || mask || dF.masks["default"]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == "UTC:") {
			mask = mask.slice(4);
			utc = true;
		}

		var	_ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? "a"  : "p",
				tt:   H < 12 ? "am" : "pm",
				T:    H < 12 ? "A"  : "P",
				TT:   H < 12 ? "AM" : "PM",
				Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

		return mask.replace(token, function ($0) {
			return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
		});
	};
}();

// Some common format strings
dateFormat.masks = {
	"default":      "ddd mmm dd yyyy HH:MM:ss",
	shortDate:      "m/d/yy",
	mediumDate:     "mmm d, yyyy",
	longDate:       "mmmm d, yyyy",
	fullDate:       "dddd, mmmm d, yyyy",
	shortTime:      "h:MM TT",
	mediumTime:     "h:MM:ss TT",
	longTime:       "h:MM:ss TT Z",
	isoDate:        "yyyy-mm-dd",
	isoTime:        "HH:MM:ss",
	isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
	isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
	monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};
dateFormat.dispFormat = {
	th:{
		dayNames: [
			"อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส.",
			"อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัส", "ศุกร์", "เสาร์"
		],
		monthNames: [
			"ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.",
			"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
		]
	}
};
// For convenience...
Date.prototype.format = function (mask, utc, dispFormat) {
	return dateFormat(this, mask, utc, dispFormat);
};

function strGetDisplayNumber(objValue, blnBahtSign, intDigit) {
	if (! objValue) objValue = 0;
	if (isNaN(objValue)) return 'NaN';
	_value = parseFloat(objValue);
	_intDigit = intDigit || 0;
	_blnBahtSign = blnBahtSign || false;
	if (_blnBahtSign) {
		return '฿' + formatNumber(_value, _intDigit);
	} else {
		return formatNumber(_value, _intDigit);
	}
}

function strConvertDataToTableObject() {
	var jsonReturn = [];
	var _cols = _objDataTable.fnSettings().aoColumns;
	var _data = _objDataTable.fnGetData();
	var _each;
	//_data = _objDataTable.fnGetData();//TableTools.fnGetMasters()[0].fnGetTableData( oConfig );
	for (i=0;i<_data.length;i++) {
		_each = _data[i];
		_new = {};
		for (j=0;j<_cols.length;j++) {
			_col = _cols[j];
			if ((_col.bVisible) && (typeof _col.mData !== 'function')) _new[j + '_' + _col.sTitle] = _each[_col.mData];
		}
		jsonReturn.push(_new);
	}
	if (jsonReturn.length > 0) {
		var _strHead = '';
		$.each(jsonReturn[0], function (k, v) {
			_strHead += "<th>"+k+"</th>";
		});
		_strHead = '<tr>' + _strHead + '</tr>';
		var _strBody = '';
		$.each(jsonReturn, 
			function () {
				var _row = "";
				$.each(this, function (k , v) {
					_row += "<td>"+v+"</td>";
				});
				_strBody += "<tr>"+_row+"</tr>";                 
			}
		);
		var _strHTMLTable = '<table id="tblExportExcel">' + _strHead + _strBody + '</table>';
		return _strHTMLTable;
	} else {
		return '';
	}
}

function doExportExcel( nButton, oConfig, oFlash ) {
	var uri = 'data:application/vnd.ms-excel;base64,'
		, template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
		, base64 = function(s) { return window.btoa(unescape(encodeURIComponent(s))) }
		, format = function(s, c) { return s.replace(/{(\w+)}/g, function(m, p) { return c[p]; }) }
	//data = $('#tblSearchResult').dataTable().fnGetData();
	if (_objDataTable) {
		var ctx = {worksheet: name || 'export', table: strConvertDataToTableObject()}
		window.location.href = uri + base64(format(template, ctx));
	}
}

function strConvertInvoiceDate(str) {
	var parts = str.split("/");
	if (parts.length < 3) return '';
	return parseInt(parts[2], 10) + '-' + pad(parseInt(parts[1], 10), 2, '0') + '-' +  pad(parseInt(parts[0], 10), 2, '0');
}

function pad(n, width, z) {
	z = z || '0';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

function _isInt(n) {
	return parseFloat(n) == parseInt(n, 10) && !isNaN(n);
}

function getData(obj) {
	return _getElemData(obj);
}
function getLabel(obj) {
	return _getElemLabel(obj);
}
function getValue(obj, defReturn) {
	return _getElemValue(obj, defReturn);
}
function setValue(obj, arrData, blnStrictDataType) {
	return _setElemValue(obj, arrData, blnStrictDataType);
}
function clearValue(obj) {
	_clearElemValue(obj);
}
function isEnable(obj) {
	return _enableElem(obj);
}
function _getElemData(elem) {
	var _elem = _toJQObj(elem);
	if (_elem.length <= 0) return;
	var _data = (_elem.attr('data'))?_elem.attr('data'):'';
	if (_data == '') {
		if (_elem.parents('.data-container').length > 0) {
			_data = $(_elem.parents('.data-container').get(0)).attr('data');
		}
	}
	if (_data == '') {
		var _tag = _elem.get(0).tagName.toLowerCase();
		var _type = _elem.get(0).type;
		if (_tag == 'input' && _type == 'radio') {
			_data = _elem.attr('name');
		} else if ((_elem.attr('id')) && (_elem.attr('id').length > 4)) {
			_data = _elem.attr('id').substr(4);
		}
	}
	return _data;
}
function _getElemLabel(elem) {
	var _elem = _toJQObj(elem);
	if (_elem.length <= 0) return;
	var _label = (_elem.find('label').length > 0)?$(_elem.find('label').get(0)).html():'';
	if (_label == '') {
		if (_elem.parents('.data-container').length > 0) {
			if ($(_elem.parents('.data-container').get(0)).find('label').length > 0) {
				_label = $($(_elem.parents('.data-container').get(0)).find('label').get(0)).html()
			}
		}
	}
	_label = _label.trim();
	if ((_label != '') && (_label.substr(-1) == ':')) _label = _label.substr(0, (_label.length-1)).trim();
	
	return _label;
}

function _setElemValue(elem, data, blnStrictDataType) {
	var _data = (typeof data == 'undefined')?0:data;
	var _blnChangeType = true;
	if ((typeof blnStrictDataType != 'undefined') && (blnStrictDataType == false)) _blnChangeType = false;
	var _value;
	var _elem = _getJQUserInputElement(elem);
	if (_elem.length == 0) return false;
	var _tag = _elem.get(0).tagName.toLowerCase();
	var _type = _elem.get(0).type;
	if (typeof _data == 'object') { //case pass array of values
		var _dataField = _getElemData(_elem);
		if (_dataField in _data) _value = _data[_dataField];
	} else {
		_value = _data;
	}
	if (_tag && (typeof _value != 'undefined')) {
		if (_elem.is('.input-integer, .input-double, .input-number') && (typeof _value == 'string')) _value = _cleanNumericValue(_value);
		if (_blnChangeType === true) {
			if (_elem.is('.input-double, .input-number')) {
				if (! isNaN(_value)) {
					_value = parseFloat(_value);
				} else {
					doSetVldrError(_elem, '', 'SetInvalidDataType', 'Invalid data type on _SetElemValue');
					return false;
				}
			} else if (_elem.is('.input-integer')) {
				if (! isNaN(_value)) {
					_value = parseInt(_value);				
				} else {
					doSetVldrError(_elem, '', 'SetInvalidDataType', 'Invalid data type on _SetElemValue');
					return false;
				}
			}
		}
		if (_elem.hasClass('hasDatepicker')) {
			//var _strFormat = _elem.datepicker('option', 'dateFormat');
			if ((typeof _value == 'string') && (_value.trim() == '')) return false;
			var _datVar = new Date(_value);
			_elem.datepicker('setDate', _datVar);
		} else if ((_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea')) {
			_elem.val(_value);
		} else if (_tag == 'select') {
			if (_elem.data("ui-combobox")) {
				_elem.combobox('setValue', _value);
			} else {
				_elem.val(_value);
			}
		} else if (_tag == 'input' && _type == 'checkbox') {
			if ((_value == 1) || (_value == 't') || (_value == true)) {
				_elem.prop('checked', true);
			} else {
				_elem.prop('checked', false);
			}
		} else if (_tag == 'input' && _type == 'radio') {
			if (_value == _elem.val()) {
				_elem.prop('checked', true);
			} else {
				_elem.prop('checked', false);
			}
		} else if ((_tag == 'span') || (_tag == 'div')) {
			_elem.html(_value);
		}
	}
}
function _clearElemValue(elem) {
	_elem = _getJQUserInputElement(elem);
	if (_elem.length == 0) return false;
	var _tag = _elem.get(0).tagName.toLowerCase();
	var _type = _elem.get(0).type;
	if ((_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea')) {
		_elem.val('');
	} else if (_tag == 'select') {
		if (_elem.data("ui-combobox")) {
			_elem.combobox("clearValue");
		} else {
			_elem.val('');
		}
	} else if (_tag == 'input' && (_type == 'checkbox' || _type == 'radio')) {
		_elem.prop('checked', false);
	} else {
		if ($.isFunction(_elem.html)) _elem.html('');
	}
}

function _cleanNumericValue(val) {
	if ((typeof val == 'undefined') || (val == null)) return;
	var _val = val;
	_val = _val.toString().trim();
	var _blnMinus = (_val.match(/^\(.+\)$/) || false) !== false;
	_val = _val.replace(/[a-zA-Z_,\( \)]/g, '');
	if ((_val.length <= 0) || isNaN(_val)) {
		return '';
	} else {
		return (_blnMinus)?(parseFloat(_val) * -1):parseFloat(_val);
	}
}

function doSelectDisplayFields() {
	$("#divSelectableFields").dialog( "open" );
}

function _visibleButtonColumns(blnVis) {
	_bln = (blnVis || false);
	_colLength = 0;
	if (_aoColumns) _colLength = _aoColumns.length;
	if ((_objDataTable) && (_colLength > 3)) {
		_objDataTable.fnSetColumnVis(_colLength - 3, _bln);		
		_objDataTable.fnSetColumnVis(_colLength - 2, _bln);		
		_objDataTable.fnSetColumnVis(_colLength - 1, _bln);		
	}
	return false;
}

function doClearDisplayInfo(index) {
	var _indx = index || 0;
	if (_indx == -1) {
		$(".cls-div-info").html("");
	} else {
		$(".cls-div-info[index=" + _indx + "]").html("");
	}
}

function doDisplayInfo(msg, title, index) {
	var _indx = index || 0;
	var _strFilter = (_indx > -1)?'[index=' + _indx + ']':'';
	$(".cls-div-info" + _strFilter).html(title + ': ' + msg);
	$(".cls-div-info" + _strFilter).show(500).fadeIn(500).fadeOut(200).fadeIn(500).fadeOut(200).fadeIn(500);
}

function _doDisplayFormError(form) {
	_strErrList = '';
	$( form ).find(".input-invalid").each(
		function () {
			_strErrList += "\r\n   - " + $(this).prop('id') + ': ' + $(this).prop('error-msg')
		}
	);
	if (_strErrList != '') {
		alert(MSG_ALERT_FORM_INVALID + _strErrList);
	}
}
function _doClearForm(form) {
	var _index = $(form).attr('index') || 0;
	doClearVldrError(form);
	doClearDisplayInfo(_index);
	_doSetEnableFormUserInput(form, true);
	var _div = $( form ).parents('.cls-div-form-edit-dialog')[0];
	if ($( _div ).find(".cls-div-sub-list").length > 0) {
		$( _div ).find('.cls-div-sub-list').attr('main-search', '');
		if ($.isFunction(clearSubList)) clearSubList();
	}
	$(form).find('.user-input:not(".data-constant")').each(
		function () {
			_tag = this.tagName.toLowerCase();
			_type = this.type;
			if ((_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea')) {
				$(this).val('');
			} else if (_tag == 'select') {
				if ($(this).data("ui-combobox")) {
					$(this).combobox("clearValue");
				} else {
					$(this).val('');
				}
			} else if (_tag == 'input' && (_type == 'checkbox' || _type == 'radio')) {
				$(this).prop('checked', false);
			} else if ((_tag == 'span') || (_tag == 'div')) {
				$(this).html('');
			}
		}
	);
	//++ Clear data value for special link
	if (typeof _objEditPanelData == 'object') {
		for (_key in _objEditPanelData) {
			$(form).find('[href*="{' + _key + '}"]').each(function() { $(this).addClass('link-disabled'); });
			_objEditPanelData[_key] = "";
		}
	}
	//-- Clear data value for special link	
	/*
	$( form ).find(".user-input").each(
		function () {
			_pref = $(this).prop('id').substr(0, 3);
			_name = $(this).prop('id').substr(4);
			switch (_pref) {
				case 'txt':  // input
				case 'txa':  // textarea
				case 'hdn':  // hidden
					$( this ).val('');
					$( this ).prop("readonly", false);
					break;
				case 'sel':  // select
					if ($(this).data("ui-combobox")) {
						$( this ).combobox('setValue', "" );
						$( this ).combobox('enable', true);
					}
					break;
				case 'chk': // checkbox
				case 'rdo': // radio
					$( this ).prop("checked", false);
					$( this ).prop("disabled", false);
					break;
			}
		}
	);
	*/
	$(form).find("#btnFormSubmit").css('display', '');
	$(form).find("#btnFormReset").css('display', '');
}
function _doSetValueFormUserInput(form, objData, blnClearValue) {
	if (blnClearValue || false) _doClearForm(form);
	
	$(form).find(".user-input").each(
		function () {
			//_pref = $(this).prop('id').substr(0, 3);
			_elem = $(this);
			_name = (($(this).attr('id') || '').length > 4) ? $(this).attr('id').substr(4) : $(this).attr('data');
			_tag = this.tagName.toLowerCase();
			_type = this.type;
			if (_elem.hasClass('hasDatepicker') && (_name in objData)) {
				//var _strFormat = _elem.datepicker('option', 'dateFormat');
				var _datVar = new Date(objData[_name]);
				_elem.datepicker('setDate', _datVar);
			} else if ((_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea')) {
				if (_name in objData) $(this).val(objData[_name]);
			} else if (_tag == 'select') {
				if (_name in objData) {
					if ($(this).data("ui-combobox")) {
						$(this).combobox('setValue', objData[_name]);
					} else {
						$(this).val(objData[_name]);
					}
				}
			} else if (_tag == 'input' && _type == 'checkbox') {
				if (_name in objData) {
					if ((objData[_name] == 1) || (objData[_name] == true)) {
						$(this).prop('checked', true);
					} else {
						$(this).prop('checked', false);
					}
				}
			} else if (_tag == 'input' && _type == 'radio') {
				_name =  $(this).prop('name');
				if (_name in objData) {
					if (objData[_name] == $( this ).val()) {
						$(this).prop('checked', true);
					} else {
						$(this).prop('checked', false);
					}
				}
			} else if ((_tag == 'span') || (_tag == 'div')) {
				if (_name in objData) $(this).html(objData[_name]);
			}
		}
	);
}
/* OLD
function _getElemValue(elem) {
	_elem = _getJQUserInputElement(elem);
	if (_elem.length <= 0) return;
	_tag = _elem.get(0).tagName.toLowerCase();
	_type = _elem.get(0).type;
	if ((_elem) && (_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea') || (_tag == 'select')) {
		if (_elem.is('.input-integer, .input-double, .input-number')) {
			var _val = _cleanNumericValue(_elem.val());
			_elem.val(_val); //change to refined numeric data
			return _val;
		} else {
			return _elem.val();
		}
	} else if (_tag == 'input' && (_type == 'checkbox')) {
		if (_elem.hasClass('cls-toggle-label')) {
			if (_elem.prop('checked') == true) {
				return _elem.val();
			} else {
				return false;
			}
		} else {
			if (_elem.prop('checked') == true) {
				return '1';
			} else {
				return '0';
			}
		}
	} else if (_tag == 'input' && (_type == 'radio')) {
		if (_elem.prop('checked') == true) {
			return _elem.val();
		} else {
			return false;
		}
    } else if ((_tag == 'span') || (_tag == 'div')) {
		if (_elem.is('.input-integer, .input-double, .input-number')) {
			return _cleanNumericValue(_elem.html());
		} else {
			return _elem.html();
		}
	}
}
*/
function _getElemValue(elem, defReturn) {
	var _elem = _getJQUserInputElement(elem);
	var _defRet = defReturn;
	var _valRet;
	if (_elem.length <= 0) return _defRet;
	_tag = _elem.get(0).tagName.toLowerCase();
	_type = _elem.get(0).type;
	if ((_elem) && (_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea') || (_tag == 'select')) {
		if (_elem.data('ech-multiselect')) {
			var _arrRet = [];
			if (_elem.is('.input-integer, .input-double, .input-number')) {
				var _arrVal = _elem.val();
				for (var _i in _arrVal) {
					_dummy = _cleanNumericValue(_arrVal[_i]);
					if (_dummy) _arrRet.push(_dummy);
				}
			} else {
				_arrRet = _elem.val() || false;
			}
			if ((_arrRet) && (_arrRet.length > 0)) return _arrRet.join(',');
		} else if (_elem.is('.input-integer, .input-double, .input-number')) {
			_valRet = _cleanNumericValue(_elem.val());
			//if ((_valRet) && (_elem.val() != _valRet)) _elem.val(_valRet); //change to refined numeric data // removed after implement class .format-number
		} else {
			_valRet = _elem.val();
		}
	} else if (_tag == 'input' && (_type == 'checkbox')) {
		if (_elem.is(':checked') == true) {
			return (_elem.val()) ? _elem.val() : '1';
		} else {
			return '0';
		}
	} else if (_tag == 'input' && (_type == 'radio')) {
		var _elem = $('input[type="radio"][name="' + _elem.attr('name') + '"]:checked');
		if (_elem.length > 0) {
			_valRet = _elem.val();
		}
    } else if ((_tag == 'span') || (_tag == 'div')) {
		if (_elem.is('.input-integer, .input-double, .input-number')) {
			_valRet = _cleanNumericValue(_elem.html());
		} else {
			_valRet = _elem.html();
		}
	} else if ((_tag == 'input') && (_type == 'file') && (_elem.parents('span.spn-image-select').length > 0)) {
		var _prnt = $(_elem.parents('div.display-upload').get(0));
		var _hdn = $($('input[type="hidden"].fmg-value', _prnt).get(0));
		if (_prnt.is('.clsCtrl-deactivate')) {
			_valRet = 'remove';
		} else if (! _elem.is('.clsCtrl-valueChanged')) {
			_valRet = 'unchange';
		} else {
			if (_hdn.length > 0) _valRet = _hdn.val();
		}
	} else {
		_valRet = _elem.val();
	}
	if ((_valRet == null) || (_valRet.toString().trim() == '')) {
		return _defRet;
	} else {
		return _valRet;		
	}
}

function _setEnableElem(elem, blnEnabled) {
	_elem = $(elem);
	_bln = blnEnabled || false;
	_tag = _elem[0].tagName.toLowerCase();
	_type = _elem[0].type;
	if ((_tag == 'input' && (_type == 'text' || _type == 'hidden')) || (_tag == 'textarea')) {
		if (_elem.hasClass('hasDatepicker')) {
			_elem.datepicker( "option", "disabled", (! _bln));
		} else {
			_elem.attr("readonly", (! _bln));
		}
	} else if (_tag == 'select') {
		if (_elem.data("ui-combobox")) {
			_elem.combobox('enable', _bln);
		} else {
			_elem.attr("disabled", (! _bln));
		}
	} else if (_tag == 'input' && (_type == 'checkbox' || _type == 'radio' || _type == 'file')) {
		_elem.attr("disabled", (! _bln));
	}
}
function _doSetEnableFormUserInput(form, blnEnabled) {
	_bln = blnEnabled || false;
	$(form).find(".user-input:not(.set-disabled)").each(
		function () {
			_setEnableElem(this, _bln);
		}
	);
	/*
	$( form ).find(".user-input").each(
		function () {
			_pref = $(this).prop('id').substr(0, 3);
			_name = $(this).prop('id').substr(4);
			switch (_pref) {
				case 'txt':  // input
				case 'txa':  // textarea
				case 'hdn':  // hidden
					$( this ).prop("readonly", ! _bln);
					break;
				case 'sel':  // select
					$( this ).combobox('enable', _bln);
					break;
				case 'chk': // checkbox
				case 'rdo': // radio
					$( this ).prop("disabled", ! _bln);
					break;
			}
		}
	);
	*/
	if (_bln) {
		$(form).find("#btnFormSubmit:not(.hidden):not(.invisible)").css('display', '');
		$(form).find("#btnFormReset:not(.hidden):not(.invisible)").css('display', '');
	} else {
		$(form).find("#btnFormSubmit").css('display', 'none');
		$(form).find("#btnFormReset").css('display', 'none');
	}
}

function blnDataChanged(form) {
	_isChanged = false;
//console.debug(_currEditData);
	$(form).find('.user-input:not(".no-validate")').each(
		function () {
//console.debug($(this).is('id'));
			_pref = $(this).attr('id').substr(0, 3);
			_name = $(this).attr('id').substr(4);
			if ($(this).is('readonly') || $(this).is('disabled')) return true;
			switch (_pref) {
				case 'txt':  // input
				case 'sel':  // select
				case 'txa':  // textarea
				case 'hdn':  // textarea
					if (_currEditData) {
//console.debug(_name + " : " + _currEditData[_name] + ' == ' + $( this ).val());
						if (($( this ).val() || 0) != (_currEditData[_name] || 0)) {
							_isChanged = true;
							return false;
						}
					} else {
						if ($( this ).val() != '') {
							_isChanged = true;
							return false;
						}
					}
					break;
				case 'chk':  // checkbox
					if (_currEditData) {
//console.debug(_name + " : " + _currEditData[_name] + ' == ' + $( this ).prop('checked'));
						if (((_currEditData[_name] == 1) || (_currEditData[_name] == true)) != $( this ).prop('checked')) {
							_isChanged = true;
							return false;
						}
					} else {
						if ($( this ).prop('checked')) {
							_isChanged = true;
							return false;
						}
					}
					break;
				case 'rdo': // radio
					if (_currEditData) {
						_name =  $(this).prop('name');
//console.debug(_name + " : " + _currEditData[_name] + ' == ' + $( this ).prop('checked'));
						if ((_currEditData[_name] == $( this ).val()) != $( this ).prop('checked')) {
							_isChanged = true;
							return false;
						}
					} else {
						if ($( this ).prop('checked')) {
							_isChanged = true;
							return false;
						}
					}
					break;
			}
		}
	);
//console.debug('changed = ' + _isChanged);
	return _isChanged;
}

function _cleanNumericValue(val) {
	var _val = val || 0;
	_val = _val.toString().trim();
	if (_val.length > 0) _val = _val.replace(/,/g, '');
	return parseFloat(_val);
}

function _toJQObj(obj) {
	if (typeof obj == 'string') {
		if ($('[data="' + obj + '"]').length > 0) {
			return $('[data="' + obj + '"]');
		} else if ($('#' + obj).length > 0) {
			return $('#' + obj);
		} else {
			return;
		}
	} else if (obj instanceof jQuery) {
		return obj
	} else {
		return $(obj);
	}
}

function _getJQUserInputElement(elem) {
	var _elem = _toJQObj(elem);
//	if (_elem.get(0).tagName.toLowerCase() == 'select') {
//		return _elem;
//	} else {
	if (_elem.children(':not(label,option)').length > 0) _elem = $(_elem.children(':not(label,option)').get(0));
	return _elem;
//	}
}

function jqObjDataContainer(obj) {
	var _elem = _toJQObj(obj);
	if (_elem) {
		if (_elem.hasClass('data-container')) {
			return _elem;
		} else if (_elem.parents('.data-container').length > 0) {
			return $(_elem.parents('.data-container').get(0));
		} else if ($('.data-container', _elem).length > 0) {
			return $($('.data-container', _elem).get(0));
		}
	}
}

function doSetVldrError(obj, data_field, type, msg, index) {
    var _elem = _toJQObj(obj);
	if (_elem) {
		if ((typeof index == 'undefined') || (index == '')) index = (_elem.parents('form').length > 0)?$(_elem.parents('form').get(0)).attr('index'):'';
		var _elemDispErr = false;
		if (index) {
			_elemDispErr = $('.ul-vldr-error-msg[index="' + index + '"]');
			if (_elemDispErr.length <= 0) _elemDispErr = _elem.parents('.ul-vldr-error-msg');
			if (_elemDispErr.length <= 0) _elemDispErr = $('.ul-vldr-error-msg');
			if (_elemDispErr.length > 0) {
				_elemDispErr = $(_elemDispErr[0]);
			} else {
				_elemDispErr = false;
			}
		}
		var _dataField = data_field || _getElemData(obj);
		var _strErrMsg = ((_elem.attr('invalid-msg') && (_elem.attr('invalid-msg') != msg))?_elem.attr('invalid-msg') + ', ':'') + msg;
		_elem.addClass('input-invalid').attr('invalid-msg', _strErrMsg).attr('title', _strErrMsg);
		if (_elemDispErr) _elemDispErr.append('<li id="li_' + _dataField + '__' + type + '">' + _strErrMsg + '</li>');
	}
}

function blnValidateElem(elem) {
	var _elem = _toJQObj(elem);
	doClearVldrErrorElement(_elem);

	if (_elem.is('.input-required') && ( ! blnValidateElem_TypeRequired(_elem))) return false;
	if (_elem.is('.input-integer') && ( ! blnValidateElem_TypeInt(_elem))) return false;
	if (_elem.is('.input-double') && ( ! blnValidateElem_TypeDouble(_elem))) return false;
	
    return true;
}

function blnValidateElem_TypeRequired(elem) {
	if (elem instanceof jQuery) elem = elem.get(0);
	if (('tagName' in elem) && ('type' in  elem)) {
		var _elem = $(elem);
		_dataField = _getElemData(_elem);
		_type = elem.type;
		_tag = elem.tagName.toLowerCase();
		if ((_tag == 'input' && (_type == "text" || _type == "hidden")) || (_tag == 'select')) {
			$('#li_' + _dataField + '__required', $('.ul-vldr-error-msg')).remove();
			if ((_elem.val() || '').trim() == "") {
				var _strErrMsg = MSG_VLDR_INVALID_REQUIRED.replace(/v_XX_1/g, '( ' + _dataField + ' )') + ' ';
				doSetVldrError(_elem, _dataField, "required", _strErrMsg);
				return false;
			}
		}
	}
	return true;
}

function blnValidateElem_TypeInt(elem) {
	if (elem instanceof jQuery) elem = elem.get(0);
	if (('tagName' in elem) && ('type' in  elem)) {
		var _elem = $(elem);
		var _val = _elem.val().toString().replace(/,/g, '').trim();
		_dataField = _getElemData(_elem);
		_type = elem.type;
		_tag = elem.tagName.toLowerCase();
		if ((_tag == 'input' && (_type == "text" || _type == "hidden")) || (_tag == 'select')) {
			$('#li_' + _dataField + '__typeInt', $('.ul-vldr-error-msg')).remove();
			if ((_val !== '') && (! _isInt(_val))) {
				var _strErrMsg = MSG_VLDR_INVALID_DATATYPE.replace(/v_XX_1/g, '( ' + _dataField + ': integer )') + ' ';
				doSetVldrError(_elem, _dataField, "typeInt", _strErrMsg);
				return false;
			}
		}
	}
	return true;
}

function blnValidateElem_TypeDouble(elem) {
	if (elem instanceof jQuery) elem = elem.get(0);
	var _index = ($(elem).parents('form').length > 0)?$($(elem).parents('form').get(0)).attr('index'):'';
	var _strIndexFilter = (_index)?'[index="' + _index + '"]':'';
	if (('tagName' in elem) && ('type' in  elem)) {
		var _elem = $(elem);
		var _val = _elem.val().toString().replace(/,/g, '').trim();
		_dataField = _getElemData(_elem);
		_type = elem.type;
		_tag = elem.tagName.toLowerCase();
		if ((_tag == 'input' && (_type == "text" || _type == "hidden")) || (_tag == 'select')) {
			$('#li_' + _dataField + '__typeDouble', $('.ul-vldr-error-msg')).remove();
			if (isNaN(_val)) {
				var _strErrMsg = MSG_VLDR_INVALID_DATATYPE.replace(/v_XX_1/g, '( ' + _dataField + ': double )') + ' ';
				doSetVldrError(_elem, _dataField, "typeDouble", _strErrMsg);
				return false;
			}
        }
    }
    return true;
}

function blnValidateContainer(blnFullTest, container, strJqSelector) {
	var _blnFullLoop = blnFullTest || false;
    var _container = container || $('body');
	var _strJqSelector = strJqSelector || '';
    var _blnIsValid = true;
    doClearVldrError(_container);
    $(_strJqSelector + '.input-required', _container).each(
        function () {
            if (blnValidateElem_TypeRequired(this) == false) {
				if (_blnIsValid) _blnIsValid = false;
				if (! _blnFullLoop) return false;
			}
        }
    );
	if (!(_blnFullLoop || _blnIsValid)) return false;
	
    $(_strJqSelector + '.input-integer', _container).each(
        function () {
            if (blnValidateElem_TypeInt(this) == false) {
				if (_blnIsValid) _blnIsValid = false;
				if (! _blnFullLoop) return false;
			}
        }
    );
	if (!(_blnFullLoop || _blnIsValid)) return false;

    $(_strJqSelector + '.input-double', _container).each(
        function () {
            if (blnValidateElem_TypeDouble(this) == false) {
				if (_blnIsValid) _blnIsValid = false;
				if (! _blnFullLoop) return false;
			}
        }
    );
    return _blnIsValid;
}

function blnValidateFormValue(form) {
	var _blnValid = true;
	doClearVldrError(form);
	$( form ).find(".input-required").each(
		function () {
			_this = $( this );
			switch (_pref) {
				case 'txt':  // input
				case 'sel':  // select
					if (_this.val() == '') {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_NO_VALUE_INPUT);
						_blnValid = false;
						//return false;
					}
					break;
				case 'txa': //textarea
					if (_this.html() == '') {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_NO_VALUE_INPUT);
						_blnValid = false;
						//return false;
					}
					break;
				case 'chk': // checkbox
				case 'rdo': // radio
					if (! _this.prop('checked')) {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_NO_VALUE_INPUT);
						_blnValid = false;
						//return false;
					}
				
			}
		}
	);
	//if ( ! _blnValid ) return _blnValid;
	$( form ).find(".input-integer").each(
		function () {
			_this = $(this);
			_pref = $(this).prop('id').substr(0, 3);
			_name = $(this).prop('id').substr(4);
			_val = _this.val().toString().replace(',', '').trim();
			switch (_pref) {
				case 'txt':  // input
				case 'sel':  // select
					if ((_val !== '') && (! _isInt(_val))) {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_INTEGER_INPUT);
						_blnValid = false;
						return false;
					}
					break;
				case 'txa': //textarea
					if ((_val !== '') && (! _isInt(_val))) {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_INTEGER_INPUT);
						_blnValid = false;
						return false;
					}
					break;
			}
		}
	);
	//if ( ! _blnValid ) return _blnValid;
	$( form ).find(".input-number").each(
		function () {
			_this = $( this );
			_pref = $(this).prop('id').substr(0, 3);
			_name = $(this).prop('id').substr(4);
			_val = _this.val().toString().replace(',', '').trim();
			switch (_pref) {
				case 'txt':  // input
				case 'sel':  // select
					if ((_val !== '') && (isNaN(_val))) {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_INTEGER_INPUT);
						_blnValid = false;
						return false;
					}
					break;
				case 'txa': //textarea
					if ((_val !== '') && (isNaN(_val))) {
						_this.addClass('input-invalid');
						_this.prop('error-msg', MSG_FORM_INVALID_INTEGER_INPUT);
						_blnValid = false;
						return false;
					}
					break;
			}
		}
	);
	//if ( ! _blnValid ) return _blnValid;
	_doDisplayFormError(form);
	
	return _blnValid;
}

function doClearVldrErrorElement(elem) {
	var _elem = $(elem);
	$('.ul-vldr-error-msg li').each(function() {
		if (this.id.indexOf('li_' + _getElemData(_elem) + '__') >= 0) {
			$(this).remove();
		}
	});
	_elem.removeClass('input-invalid');
	_elem.removeProp('invalid-msg');
	_elem.removeAttr('title');
}

function doClearVldrError(container) {
    var _container = container || $('body');
    $('.ul-vldr-error-msg').empty();
    $('.input-invalid', _container).each(
		function () {
		    var _this = $(this);
		    _this.removeClass('input-invalid');
		    _this.removeProp('invalid-msg');
		    _this.removeAttr('title');
		}
	);
}

function _doFetchDataByJQSelector(arrData, container, selectText) {
    $(selectText, container).each(
        function () {
            _elem = $(this);
			//if (_elem.children().length > 0) _elem = _elem.children().get(0);
            _dataField = _getElemData(_elem);
            if (_elem.tagName && _dataField) {
                _dataField = _dataField.toLowerCase();
                switch (_elem.tagName.toLowerCase()) {
                    case 'textarea':
                        if (_dataField in _arrData) $(_elem).val(_arrData[_dataField]);
                        break;
                    case 'input':
                        if ($(_elem).hasClass('hasDatepicker')) {
                            now = new Date();
                            $(_elem).datepicker('option', 'defaultDate', now);
                            $(_elem).datepicker('setDate', now);
                            if (_dataField in _arrData) {
                                try {
                                    var _strdate = _arrData[_dataField];
                                    var _format = $(_elem).datepicker('option', "dateFormat");
                                    if (_format.indexOf('d') < 0) {
                                        _format = 'dd' + _format;
                                        _strdate = '01' + _strdate;
                                    }
                                    var _realDate = $.datepicker.parseDate(_format, _strdate);

                                    $(_elem).datepicker('option','defaultDate', _realDate);
                                    $(_elem).datepicker('setDate', _realDate);
                                } catch (err) {
                                    $(_elem).val('');
                                }
                            }
                        } else if ((_elem.type == 'text') || (_elem.type == 'hidden')) {
                            if (_dataField in _arrData) $(_elem).val(_arrData[_dataField]);
                        } else if (_elem.type = 'checkbox') {
                            _bln = false;
                            if (_dataField in _arrData) {
                                if ((_arrData[_dataField].toLowerCase() == 'true') || (parseInt(_arrData[_dataField]) == 1)) _bln = true;
                            }
                            $(_elem).prop('checked', _bln);
                            $(_elem).trigger('change');
                        }
                        break;
                    case 'span':
                        if (_dataField in _arrData) $(_elem).html(_arrData[_dataField]);
                        break;
                }
            }
        }
    );
}
function _clearByJQSelector(container, selectText) {
    $(selectText, container).each(
        function () {
            _elem = $(this).children().get(0);
            if (_elem.tagName) {
                switch (_elem.tagName.toLowerCase()) {
                    case 'textarea':
                        $(_elem).val('');
                        break
                    case 'input':
                        switch (_elem.type) {
                            case 'text':
                            case 'hidden':
                                $(_elem).val('');
                                break;
                            case 'checkbox':
                                $(_elem).prop('checked', false);
                                break;
                        }
                        break;
                    case 'span':
                        $(_elem).html('');
                        break;
                }
            }
        }
    );
}
